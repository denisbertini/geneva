Q: What does "Geneva" stand for ?
A: Geneva stands for "Grid-enabled evolutionary algorithms". The library will ultimately
   implement a multitutde of different optimization algorithms. However, as evolutionary
   algorithms were the first to be implemented, and as Geneva started life in comjunction
   with Grid computing and particle physics, which in turn are closely related to CERN in 
   Geneva/Switzerland, the name still seems to be appropriate.

Q: Why do member functions of Geneva classes do not carry the "throw(...)" specifier ?
A: In former releases, throw() specifiers were used to list the exceptions a function
   could throw. A rationale for the decision to remove these specifiers can be found
   here: http://www.gotw.ca/publications/mill22.htm .
   
Q: Are there bugs ?
A: Yes.
   
Q: Ummmh -- so if there are bugs, why don't you fix them ?
A: We have done our best to check the Geneva library for all kinds of possible problems. 
   Particularly, there is a complete unit test framework for the core optimization 
   libraries. So the actual number of bugs should be quite low. However, we cannot test 
   Geneva under all possible circumstances. This is where, in the best tradition of Open 
   Source software, we rely on you to report the problems you have encountered. Also note 
   that there may be known bugs that we are currently working on, that we currently consider 
   to have such a low priority that we have chosen to work on other parts of Geneva first, 
   or which are simply impossible to fix, as they are related to problems of a particular
   execution environment.
   
Q: When I run one of the examples in networked mode on the local box, the optimization stops
   reproducibly after a few hundred iterations. Is this a bug ?
A: The Geneva library assumes that evaluation functions run for a (possibly very) long time.
   Consequently clients disconnect from the server as soon as they have received a work item,
   and reconnect, once they have finished the calculation. The examples shipped with the 
   library, in turn, only implement evaluation functions that run for a few milliseconds.
   This means that a lot of connections are opened and closed in a very short time. You might
   then quickly run out of ports, whose number is limited on Linux (you can find this out with 
   the command "cat /proc/sys/net/ipv4/ip_local_port_range"). One remedy is explained here:
   http://www.speedguide.net/read_articles.php?id=121 (search for TCP_TW_REUSE). Note that 
   you need to carefully evaluate the effects of resetting that variable on your system.
   See also a related 2007 discussion on the Boost.Asio Usenet forum (quoted e.g. here:
   http://osdir.com/ml/lib.boost.asio.user/2007-06/msg00101.html) .
   