Target systems
==============

The main development work of the Geneva library collection is currently done
on Ubuntu and Debian. It is likely that Geneva compiles on most other Linux
and Unix systems using the GNU Compiler Collection. The authors would very
much appreciate your feedback through the Geneva Development Forum
http://www.gemfony.com/index.php?forums .


Building and installing
=======================

The build system uses CMake in version 2.6 or later.

You will also need the Boost libraries (see http://www.boost.org) in version
1.41 or newer. See either the Appendix "Installing Boost in Debian/Ubuntu" or
the Appendix "Compiling Boost" below for more details. We currently recommend
Boost 1.43 .

If you wish to build from the source code version control tree you will also
need the Bazaar version control tools. This is not needed if you only intend
to build the official releases from the provided tarballs.

To build the Geneva library use one of the two procedures enumerated below.
In case you encounter any bugs or issues please let us know through the Geneva
bugtracker:

    https://bugs.launchpad.net/geneva


a) The easy (but more restricted) way
-------------------------------------

Geneva comes with a build script that facilitates the somewhat complicated
call to cmake. Assuming you are in $HOME/build and Geneva is in $HOME/Geneva,
copy the config file over:

cp ../Geneva/scripts/genevaConfig.gcfg ./myGenevaConfig.gcfg

Adapt the variables in the file appropriately. Then call

sh ../Geneva/scripts/prepareBuild.sh ./myGenevaConfig.gcfg

Finally build and install in the usual way:

make		# Use the -j2 switch if you have a dual core CPU
make install

You can clean up the build folder by running "make clean" inside of $HOME/build .


b) Direct call to cmake
-----------------------

In order to compile this project and the examples:

Create a build directory anywhere in the file system and change into it.
Then call

cmake /path/to/geneva-top-dir

followed by a simple "make" and "make install".

In order to choose a custom installation directory (instead of the default
/opt/geneva), call

cmake /path/to/geneva-top-dir -DCMAKE_INSTALL_PREFIX="/where/the/library/goes"

Note that under Linux, you will have to make the installation directory
known to the linker, so henceforth you can link to the library. Under most
Linux systems this can be done by creating a file /etc/ld.so.conf.d/geneva.conf
with the content

/where/the/library/goes/lib

You then need to execute "ldconfig -v". Otherwise you can export the
library location prior to running programs based on Geneva:

export LD_LIBRARY_PATH="/where/the/library/goes/lib:$LD_LIBRARY_PATH"

Somewhat older distributions won't provide a new enough version of Boost
(i.e., at least 1.41). You might thus have compiled your own version of
Boost, and have installed it in a non-standard location. In order for
CMake to find this directory, you can either edit the top-level
CMakeLists.txt file and hard-code the paths (uncomment the appropriate
entries there), or provide the necessary variables at the command line
when calling cmake. This can be done in the following way (assuming that
Boost is installed in /opt/boost143):

cmake /path/to/geneva-top-dir -DBOOST_ROOT="/opt/boost143"\
                              -DBOOST_INCLUDEDIR="/opt/boost143/include/boost/"\
                              -DBOOST_LIBRARYDIR="/opt/boost143/lib"

Adding another define -DGENEVA_BUILD_TYPE="Release" or -DGENEVA_BUILD_TYPE="Debug"
switches between Release and Debug (default) builds.

Adding a -DCMAKE_VERBOSE_MAKEFILE="1" will allow you to see the command
line that was used to call the compiler.

This command needs to be called on a single line.

The commands shown here were tested on an Ubuntu 9.10 system.


Recommended Software
====================

By default a Geneva population emits information suitable for ROOT
(see http://root.cern.ch). ROOT is a C++ analysis framework widely used
in particle physics. It is built around the C++ interpreter cint. It is
recommended to install ROOT in your system, as also some of the examples
emit information in the ROOT format (they are essentially writing ROOT
programs). Note, though, that ROOT is not required to perform
optimization with the Geneva library collection.


Appendix: Installing Boost in Debian/Ubuntu
===========================================

Both Debian "Squeeze" (testing) and Ubuntu 10.10 "Maverick Meerkat" or
newer have the required Boost packages to be able to compile and run Geneva:

	libboost-dev
	libboost-date-time-dev
	libboost-filesystem-dev
	libboost-program-options-dev
	libboost-regex-dev
	libboost-serialization-dev
	libboost-system-dev
	libboost-test-dev
	libboost-thread-dev

You can install them all at once with the command:

sudo apt-get install libboost-dev libboost-date-time-dev libboost-filesystem-dev \
	libboost-program-options-dev libboost-regex-dev libboost-serialization-dev \
	libboost-system-dev libboost-test-dev libboost-thread-dev

Note, however, that older versions of the Debian/Ubuntu Boost-test library packages
(libboost-test-dev and the related package libboost-test1.XX-dev) are missing the
test_exec_monitor static library. The package libboost-test1.42-dev is fine
starting from version 1.42.0-3, whereas the version available in Debian Lenny,
Ubuntu Karmic, and Ubuntu Lucid are affected by this problem.
If you can do without compiling the tests and the examples, you can just comment
out the following lines in the main CMakeList.txt file:
	test_exec_monitor			# In the FIND_PACKAGE() statement
	ADD_SUBDIRECTORY (examples)
	ADD_SUBDIRECTORY (tests)


Appendix: Compiling Boost
=========================

Download Boost from http://www.boost.org and extract the compressed file.
This will create a folder "boost_1_43_0", for instance. Change to that
folder and, assuming Boost should be installed in /opt/boost143 (which
should be writable), execute

./bootstrap.sh --with-libraries=date_time,filesystem,program_options,regex,serialization,system,thread,test \
               --prefix=/opt/boost143
./bjam
./bjam install

You can add a "-j 2" to the second command if your system has two cores.
This will speed up the otherwise quite long compilation time.

Once done you can use the Boost include path as explained above, with
BOOST_ROOT="/opt/boost143".

If FindBoost.cmake has trouble finding the Boost libraries in the specified
location, it might help to compile the library with the bjam flag
"--layout=versioned" or "--layout=tagged".


Appendix: Known bugs and (possibly) fixes on some platforms
===========================================================

See the KNOWNBUGS file in the main source folder.
