Target systems
==============

The main development work of the Geneva library collection is currently done
on Ubuntu. It is likely that Geneva compiles on most other Linux and Unix
systems using recent versions of the GNU Compiler Collection or CLang.

We have also managed to compile Geneva on MacOS 10.15.3 using the Clang
compiler, which comes with the development suite. Note that support for MacOS
is experimental.

Earlier versions of Geneva are also known to compile and work under Windows
using the MS Visual C++ 14.0 ("Visual Studio Community 2015") compiler. While we
try to maintain Windows compatibility particularly be sticking to the C++ standard,
there are no regular tests that ascertain that compatibility. So your mileage
may vary.

The authors would very much appreciate your feedback through the Geneva
GitHub Project. In case you encounter any bugs or issues please let us know through
the Geneva bugtracker: https://github.com/gemfony/geneva/issues .

For further information, please also have a look at our user-manual, available
from the Downloads section of our web page http://www.gemfony.eu .


Prerequisites
=============

The build system uses CMake in version 3.1 or later.

You will also need the Boost libraries (see http://www.boost.org) in version
1.70 or newer. Relying on the libraries provided by your system (if available)
is the recommended way to install Boost. Alternatively, you may want to
compile and install a custom Boost from source, see the section "Compiling
Boost" below for more details. We currently recommend Boost version 1.70 or higher.

Please do make sure that Boost has been compiled with the same C++ standard
mode that you wish to use for Geneva. Geneva currently requires support
for C++14.

If you wish to build from the source code available from our version control
tree you will also need the Git version control tool. This is not needed if
you only intend to build the official releases from the provided "tar balls".


Installation prerequisites on Debian/Ubuntu
-------------------------------------------

The following commands should be enough to install the required prerequisites
in any reasonably modern Ubuntu release (Ubuntu 18.04 or later):

sudo apt-get install --no-install-recommends cmake git g++

The required Boost version (1.70 or later) is currently not available as
official OS packages in any of the above distributions. When it happens to
be available in the future, or if you happen to find alternative repositories
for these libraries, the following command should be enough to get the
Boost dependencies set up:

sudo apt-get install --no-install-recommends libboost-dev libboost-atomic-dev \
        libboost-filesystem-dev libboost-program-options-dev libboost-regex-dev \
        libboost-serialization-dev libboost-system-dev libboost-test-dev

Building and installing Geneva
==============================

To build the Geneva library on Linux-based systems use one of the two
procedures listed below.


a) The easy (but more restricted) way
-------------------------------------

Geneva comes with a build script that facilitates the somewhat complicated
call to cmake. Assuming you are in $HOME/build and Geneva is in $HOME/Geneva,
copy the config file over:

cp ../Geneva/scripts/genevaConfig.gcfg ./myGenevaConfig.gcfg

Note: It is recommended not to build inside of the Geneva source tree.

Adapt the variables in the file appropriately. Then call

../Geneva/scripts/prepareBuild.sh ./myGenevaConfig.gcfg

Finally build and install in the usual way:

make               # Use the -j4 switch if you have a quad core CPU
sudo make install  # Assuming you want to install to a system directory

You can clean up the build folder by running "make clean" inside of $HOME/build .

Running the prepareBuild.sh command again will put the build directory into
pristine condition.

b) Direct call to cmake
-----------------------

In order to compile this project and the examples:

Create a build directory anywhere in the file system (but not inside of the Geneva
source tree) and change into it. Then call

cmake /path/to/geneva-top-dir

followed by a simple "make" and "make install".

In order to choose a custom installation directory (instead of the default
/opt/geneva), call

cmake /path/to/geneva-top-dir -DCMAKE_INSTALL_PREFIX="/where/the/library/goes"

Somewhat older distributions won't provide a new enough version of Boost
(i.e., at least 1.70). You might thus have compiled your own version of
Boost, and have installed it in a non-standard location. In order for
CMake to find this directory, you can either edit the top-level
CMakeLists.txt file and hard-code the paths (uncomment the appropriate
entries there), or provide the necessary variables at the command line
when calling cmake. This can be done in the following way (assuming that
Boost is installed in /opt/boost170):

cmake /path/to/geneva-top-dir -DBOOST_ROOT="/opt/boost170"

Alternatively, if you installed Boost in some non-standard directories,
you may try defining both the include and library locations:

cmake /path/to/geneva-top-dir -DBOOST_INCLUDEDIR="/opt/boost170/include" \
                              -DBOOST_LIBRARYDIR="/opt/boost170/lib"

Adding another define -DGENEVA_BUILD_TYPE="Release" or -DGENEVA_BUILD_TYPE="Debug"
switches between Release and Debug (default) builds.

Adding a -DCMAKE_VERBOSE_MAKEFILE="1" will allow you to see the command
line that was used to call the compiler.

This command needs to be called on a single line.

Have a look at the configuration script prepareBuild.sh for some of the options
available for a direct call to cmake.


Making the libraries known to the system on Linux
=================================================

Note that under Linux, you will have to make the installation directory
known to the linker, so henceforth you can link to the library automatically.
Under most Linux systems this can be done by creating a file
/etc/ld.so.conf.d/geneva.conf with the content

/where/the/library/is/stored

You then need to execute "ldconfig -v".

Another possibility is to export the library location prior to running
programs based on Geneva:

export LD_LIBRARY_PATH="/where/the/library/is/stored:$LD_LIBRARY_PATH"

You should follow a similar procedure for the Boost libraries, if you
have compiled your own version of it.


Recommended Software
====================

By default a Geneva optimization emits information suitable for ROOT
(see http://root.cern.ch). ROOT is a C++ analysis framework widely used
in particle physics. It is built around the C++ interpreter cint. It is
recommended to install ROOT in your system, as also some of the examples
emit information in the ROOT format (they are essentially writing ROOT
programs). Note, though, that ROOT is not required to perform
optimization with the Geneva library collection.


Compiling Boost on Linux
========================

Download Boost from http://www.boost.org and extract the compressed file.
This will create a folder "boost_1_70_0", for instance. Change to that
folder and, assuming that Boost should be installed in /opt/boost170 (which
should be writable), execute

./bootstrap.sh --prefix=/opt/boost170
sudo ./b2 cxxflags="-std=c++14" threading=multi install

This will compile Boost using the C++14 standard, which is the recommended
version for Geneva.

You can add a "-j 4" to the second command if your system has four cores.
This will speed up the otherwise quite long compilation time.

Once done you can use the Boost include path as explained above, with
BOOST_ROOT="/opt/boost170".

If FindBoost.cmake has trouble finding the Boost libraries in the specified
location, it might help to compile the library with the flag
"--layout=versioned" or "--layout=tagged".

Do not forget to add an entry for Boost to ldconfig, as discussed above.
