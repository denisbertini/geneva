Target systems
==============

The Geneva library has been developed on OpenSUSE systems (version 11 at the time
of writing of this text). While it is likely that the same code will compile on
any other Linux and possibly Unix platforms (particularly if gcc versions newer than
4.3 are used), only Ubuntu and Debian systems have been tested in addition to OpenSUSE
up to date. The authors would very much appreciate your feedback, if you manage to
compile the library on other systems than those mentioned here.

Building and Installing
=======================

The build system now uses CMake in version 2.6, which is required due
to the availability of the FindBoost macro.

You will need a copy of Boost (see http://www.boost.org), in version
1.36 or newer. See the Appendix "Compiling Boost" below for more details.

In order to compile this project and the examples:
Create a build directory anywhere in the file system and change into it.
Then call

cmake /path/to/geneva-top-dir

followed by a simple "make".

In order to choose a custom installation directory (instead of the default
/usr/local), call

cmake /path/to/geneva-top-dir -DCMAKE_INSTALL_PREFIX="/where/the/library/goes"

Note that under Linux, you will have to make the installation directory
known to the linker, so henceforth you can link to the library. Under OpenSUSE 11,
this can be done by creating a file /etc/ld.so.conf.d/geneva.conf with the content

/where/the/library/goes/lib

You then need to execute "ldconfig -v".

Several Linux distributions still don't provide a new enough Boost version (i.e.,
at least 1.36). You might thus have compiled your own version of Boost, and have
installed it in a non-standard location. In order for CMake to find this directory,
you can either edit the top-level CMakeLists.txt file and hard-code the paths
(uncomment the appropriate entries there), or provide the necessary variables at
the command line when calling cmake. This can be done in the following way
(assuming that Boost is installed in /opt/boost138):

cmake /path/to/geneva-top-dir -DBOOST_ROOT="/opt/boost138"\
                              -DBOOST_INCLUDEDIR="/opt/boost138/include/boost-1_38/"\
                              -DBOOST_LIBRARYDIR="/opt/boost138/lib"

Adding another define -DCMAKE_BUILD_TYPE="Release" or -DCMAKE_BUILD_TYPE="Debug"
switches between Release (default) and Debug builds.

Adding a -DCMAKE_VERBOSE_MAKEFILE="1" will allow you to see the command line that was
used to call the compiler.

This command needs to be called on a single line.

The commands shown here were tested on an OpenSUSE 11 system.

Compiling the OpenBabel example in <GENEVADIR>/associated/ExternalOpenBabel :
You need a current (>= 2.2.0) installation of OpenBabel, including the development
libraries. On OpenSUSE 11.1, these are the packages openbabel and libopenbabel-devel ,
If you have compiled OpenBabel yourself from source and installed it in a non-standard
location (e.g. /opt/openbabel221 for an installation of OpenBabel 2.2.1, then you
need to manually copy the package config file /opt/openbabel221/lib/pkgconfig/openbabel-2.0.pc
to a directory where the pkg-config executable (and with it the corresponding CMake macro)
can find it. On OpenSUSE 11.1, 64 bit, this can be /usr/lib64/pkgconfig/ . Other Linux
distributions will likely have similar directories configured.

Recommended Software
====================

By default a GenEvA population emits information suitable for the ROOT framework
(see http://root.cern.ch). ROOT is a C++ analysis framework widely used in particle
physics. It is built around the C++ interpreter cint. It is recommended to install
ROOT in your system, as also some of the examples emit information in the ROOT format
(they are essentially writing ROOT programs).


Appendix: Compiling Boost
==========================

Download Boost from http://www.boost.org and extract the compressed file. This will create a
folder "boost_1_38_0", for instance. Change to that folder and, assuming Boost should be
installed in /opt/boost138 (which should be writable), execute

./configure --with-libraries=date_time,system,thread,serialization,program_options,filesystem,test \
            --prefix=/opt/boost138
make install

Once done you can use the Boost include path as explained above, with BOOST_ROOT="/opt/boost138".


Appendix: Known bugs and (possibly) fixes on some platforms
===========================================================

* GCC 4.3.1 and Boost 1.36.0 (tested on OpenSUSE 11/64 bit and Debian Lenny)

The Boost.data_time library in version 1.36, in conjunction with g++ 4.3.1
(as found for instance in OpenSUSE 11/64 bit and in Debian Lenny) has a
problem in the file <BOOST-ROOT>/include/boost-1_36/boost/date_time/tz_db_base.hpp .
Line 161 should look like this:
[...]
typedef boost::date_time::dst_adjustment_offsets<time_duration_type> dst_adjustment_offsets;
[...]
In the vanilla sources, the scope boost::date_time:: is missing. This doesn't seem to affect older
compiler versions, though.

The sample applications tend to end with a segfault **after main() has ended**. It should not
have an impact on the program results, but is of course nevertheless annoying. Comments
on the Boost mailing list seem to indicate that this is related to a known problem in the
Boost.Serialization library. At the time of writing, early Betas of Boost 1.37 didn't have
this problem anymore.

* Debian Lenny

The gcc compiler in Debian returns a version number string which is not handled
correctly by the CMake versions older than 2.6.2, as the one available in Debian Lenny
(see http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=501024).
You can either install the cmake version from Debian "Testing" or apply the following
patch to /usr/share/cmake-2.6/Modules/FindBoost.cmake before calling cmake for Geneva

================================================================================
--- FindBoost.cmake.orig        2008-10-02 22:18:42.000000000 +0200
+++ FindBoost.cmake     2008-10-02 22:19:00.000000000 +0200
@@ -374,7 +374,7 @@
             ARGS --version
             OUTPUT_VARIABLE _boost_COMPILER_VERSION
         )
-        STRING(REGEX REPLACE ".* ([0-9])\\.([0-9])\\.[0-9] .*" "\\1\\2"
+        STRING(REGEX REPLACE ".* ([0-9])\\.([0-9])\\.[0-9][^ ]* .*" "\\1\\2"
                _boost_COMPILER_VERSION ${_boost_COMPILER_VERSION})
         SET (_boost_COMPILER "-gcc${_boost_COMPILER_VERSION}")
       ENDIF (NOT CMAKE_COMPILER_IS_GNUCC)
================================================================================
