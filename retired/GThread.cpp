/*
 * This file is part of the Geneva library collection.
 *
 * Note: this class was adapted from examples provided by Anthony
 * Williams along with his (highly recommended) book "Concurrency
 * in Action" / Manning. The code is covered by the Boost Software
 * License 1.0. The original code and all remaining portions in the
 * code below are Copyright Anthony Williams.
 *
 * See the NOTICE file in the top-level directory of the Geneva library
 * collection for a list of contributors and copyright information.
 *
 * The following license applies to the code IN THIS FILE:
 *
 * ***************************************************************************
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * ***************************************************************************
 *
 * NOTE THAT THE BOOST-LICENSE DOES NOT APPLY TO ANY OTHER FILES OF THE
 * GENEVA LIBRARY, UNLESS THIS IS EXPLICITLY STATED IN THE CORRESPONDING FILE!
 */

#include "GThread.hpp"

namespace Gem {
namespace Common {


/******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
/******************************************************************************/
/**
 * The constructor
 */
interrupt_flag::interrupt_flag() : m_interrupted(false)
{ /* nothing */ }

/******************************************************************************/
/**
 * Sets the interrupt flag
 */
void interrupt_flag::set() {
	m_interrupted.store(true);
}

/******************************************************************************/
/**
 * Checks whether the interrupt flag is set
 */
bool interrupt_flag::is_set() const {
	return m_interrupted.load();
}

/******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
/******************************************************************************/

// Initialization of thread_local variable
thread_local interrupt_flag this_thread_interrupt_flag;

/**
 * Retrieval of this thread's interrupt flag
 */
interrupt_flag * getThisThreadIFFlag() {
	return &this_thread_interrupt_flag;
}

/******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
/******************************************************************************/

} /* namespace Common */
} /* namespace Gem */

namespace std {


/******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
/******************************************************************************/
/**
 * Swaps the data of two thread objects
 */
void swap(Gem::Common::thread& lhs, Gem::Common::thread& rhs) {
	lhs.swap(rhs);
}

/******************************************************************************/

} /* namespace std */
