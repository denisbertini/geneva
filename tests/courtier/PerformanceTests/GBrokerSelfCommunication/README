This test submits random number containers to a broker, where they are
distributed to workers. Processing is either done directly in threads or,
alternatively, clients are started inside of threads and communicate 
via local networking.

The broker is an essential component of distributed optimization in Geneva.
This example tests its functionality independently from the Geneva optimization
code, with the help of some artificial container types.

Different test modes are available:
- Serial consumer (0)
- Internal networking (1) -- just start one executable, uses local networking
- networking (2) -- requires clients to be started                                        
- multi-threaded (3) 
- multithreaded and internal networking (4)
- multithreaded and networked mode (5)

You can switch between these modes with the -e argument. A direct connection
to the broker is available through the -u switch. This bypasses the GBrokerConnector 
class.

Start the executable with the parameter --help to see further options.

NOTE: At the end of execution in networked mode or with internal networking, you
might receive messages like this:

================================================
WARNING (recorded on 2013-Aug-25 18:41:51)
in file /home/rberlich/geneva-mac/include/courtier/GAsioTCPConsumerT.hpp near line 301

In GAsioTCPClientT<processable_type>::retrieve(): Warning!
Maximum number of consecutive stalls reached,
with last command = idle
Leaving now.

If you suspect that there is an underlying problem with Geneva,
then please consider filing a bug via
http://www.gemfony.com (link "Bug Reports") or
through http://www.launchpad.net/geneva

We appreciate your help!
The Geneva team
================================================

This is NORMAL. The server does not have anything to serve anymore, so
sends idle-commands to the clients. These will terminate themselves when
the maximum number of consecutive stalls has been reached.
