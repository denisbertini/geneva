################################################################
# This is a configuration file for the optimization            #
# algorithms implemented in the Geneva library.                #
# It is meant to be accessed through the Go class              #
#                                                              #
# This file was automatically created by the Geneva library    #
################################################################
#
# General options applicable to all optimization algorithms

# The maximum number of data transfers without result.
# 0 means "no limit"
maxStalledDataTransfers = 0

# The maximum number of failed connection attempts between
# client and server. 0 means "no limit"
maxConnectionAttempts = 100

# Specifies whether the optimizer should copy only the best individuals
# at the end of the optimization or the entire population
copyBestOnly = 1

# Indicates whether clients should return their payload even
# if no better result was found
returnRegardless = 1

# Determines the number of threads simultaneously producing
# random numbers. 0 means "automatic"
nProducerThreads = 0

# Specifies the number of entries in random number packages
# coming from the factory
arraySize = 1000

# Determines the number of threads simultaneously performing
# evaluations in multi-threaded mode. 0 means "automatic"
nEvaluationThreads = 0

# Specifies whether client-server transfers should be done in
# text-mode (0), xml-mode (1) or binary-mode (2)
serializationMode = 2

# Influences for how long the server should wait for arrivals
# in networked mode
nProcessingUnits = 0

# Indicates the maximum number of iterations in the optimization
maxIterations = 100

# The maximum amount of iterations without improvement before the current
# optimization algorithm halts
maxStallIteration = 0

# Specifies the maximum amount of time that may pass before the
# optimization ends. 0 mean "no limit"maxMinutes = 0

# Specifies in which intervals information should be emitted
reportIteration = 1

# An offset used for the iteration counter. 
# Useful when starting several successive optimization runs
offset = 0


#######################################################
# Options applicable to evolutionary algorithms
#

# The size of the entire population in evolutionary algorithms
eaPopulationSize = 100

# The number of parents in the evolutionary algorithm
eaNParents = 1

# The type of recombination scheme: DEFAULTRECOMBINE (0),
# RANDOMRECOMBINE (1) or VALUERECOMBINE(2)
eaRecombinationScheme = 2

# The sorting scheme: MUPLUSNU_SINGLEEVAL (0), MUCOMMANU_SINGLEEVAL (1) or MUNU1PRETAIN (2)
eaSortingScheme = 1

# Indicates whether the algorithm should track relationships
# between old parents and new children
eaTrackParentRelations = 0

# The amount of individuals to be added in each iteration. Set to 0
# to disable growth
eaGrowthRate = 0

# The maximum allowed size of the population if growth is enabled
eaMaxPopSize = 0


#######################################################
# Options applicable to swarm algorithms
#

# The number of neighborhoods in swarm algorithms
swarmNNeighborhoods = 5

# The number of members in each neighborhood
swarmNNeighborhoodMembers = 10

# Indicates whether all individuals of a neighborhood should
# start at the same or a random position
swarmRandomFillUp = 1

# A multiplicative factor for personal updates
swarmCPersonal = 0.05

# A multiplicative factor for local updates
swarmCNeighborhood = 2

# A multiplicative factor for velocities
swarmCVelocity = 0.4

# Indicates whether the linear (0) or classic (1)
# update rule should be used
swarmUpdateRule = 1


#######################################################
# Options applicable to gradient descents
#

# Indicates how many simultaneous gradient descents should
# be started
gdNStartingPoints = 1

# Specifies the size of the finite step in each direction
gdFiniteStep = 1e-07

# Specifies the size of the step made into the direction
# of steepest descent
gdStepSize = 0.1
