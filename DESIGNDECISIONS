This file explains some of the rationale behind the design of Geneva.
Note that, at this point, this is an unordered list of information, provided
solely on the grounds that information on some specific topics should not
get lost.

============================================================================

R.B., 10.7.08
As a rough rule, Geneva functions do not throw exceptions. If an
exception is detected, it is either logged and dealt with locally 
or the program is terminated (in which case of course also a log 
message will be emitted, so we at least get an indication of what 
was wrong). Reasons for this decision include:
- There are practically no severe exception types happening deep down
in the library, after which it makes sense to continue operations.
Either they have to be dealt with locally, or the application needs
to be terminated.
- Geneva is multi-threaded. Throwing (and catching) an exception
in this environment is not guaranteed to succeed.
By the same token, for the sake of readability, not every possible (but
very unlikely) exception is caught. As an example, it does make sense
to detect whether an ofstream can write to a file, but trying to monitor 
every cout doesn't make sense.
For the same reason, only very simple functions carry the throw() 
marker in their declaration.