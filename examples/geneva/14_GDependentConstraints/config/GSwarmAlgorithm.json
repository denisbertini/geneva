//-----------------------------------------------------------------
// This configuration file was automatically created by GParserBuilder
// File creation date: 2015-Mar-03 00:57:42
//-----------------------------------------------------------------

{
    "nEvaluationThreads":
    {
        "comment": "Determines the number of threads simultaneously running",
        "comment": "evaluations in multi-threaded mode. 0 means \"automatic\"",
        "default": "0",
        "value": "0"
    },
    "doLogging":
    {
        "comment": "Activates (1) or de-activates (0) logging",
        "default": "false",
        "value": "false"
    },
    "waitFactor":
    {
        "comment": "A static factor to be applied to timeouts",
        "default": "2",
        "value": "2"
    },
    "evalPolicy":
    {
        "comment": "Specifies which strategy should be used to calculate the evaluation:",
        "comment": "0 (a.k.a. USESIMPLEEVALUATION): Always call the evaluation function, even for invalid solutions",
        "comment": "1 (a.k.a. USEWORSTCASEFORINVALID) : Assign the worst possible value to our fitness and evaluate only valid solutions",
        "comment": "2 (a.k.a. USESIGMOID): Assign a multiple of validityLevel_ and sigmoid barrier to invalid solutions, apply a sigmoid function to valid evaluations",
        "comment": "3 (a.k.a. USEWORSTKNOWNVALIDFORINVALID): Assign \"invalidityLevel*worstKnownValid\" to invalid individuals, using normal evaluation otherwise",
        "default": "0",
        "value": "0"
    },
    "steepness":
    {
        "comment": "When using a sigmoid function to transform the individual's fitness,",
        "comment": "this parameter influences the steepness of the function at the center of the sigmoid.",
        "comment": "The parameter must have a value > 0.",
        "default": "1000",
        "value": "1000"
    },
    "barrier":
    {
        "comment": "When using a sigmoid function to transform the individual's fitness,",
        "comment": "this parameter sets the upper\/lower boundary of the sigmoid.",
        "comment": "The parameter must have a value > 0.",
        "default": "10000",
        "value": "10000"
    },
    "maxUnsuccessfulAdaptions":
    {
        "comment": "The maximum number of unsuccessful adaptions in a row for one call to adapt()",
        "default": "1000",
        "value": "1000"
    },
    "maxRetriesUntilValid":
    {
        "comment": "The maximum allowed number of retries during the",
        "comment": "adaption of individuals until a valid solution was found",
        "comment": "A parameter set is considered to be \"valid\" if",
        "comment": "it passes all validity checks",
        "default": "10",
        "value": "10"
    },
    "maxIteration":
    {
        "comment": "The maximum allowed number of iterations",
        "default": "1000",
        "value": "1000"
    },
    "maxStallIteration":
    {
        "comment": "The maximum allowed number of iterations without improvement",
        "comment": "0 means: no constraint.",
        "default": "20",
        "value": "20"
    },
    "indivdualUpdateStallCounterThreshold":
    {
        "comment": "The number of iterations without improvement after which",
        "comment": "individuals are asked to update their internal data structures",
        "comment": "through the actOnStalls() function. A value of 0 disables this check",
        "default": "0",
        "value": "0"
    },
    "reportIteration":
    {
        "comment": "The number of iterations after which a report should be issued",
        "default": "1",
        "value": "1"
    },
    "nRecordBestIndividuals":
    {
        "comment": "Indicates how many \"best\" individuals should be recorded in each iteration",
        "default": "10",
        "value": "10"
    },
    "cpInterval":
    {
        "comment": "The number of iterations after which a checkpoint should be written.",
        "comment": "-1 means: Write a checkpoint file whenever an improvement was encountered",
        "comment": " 0 means: Never emit checkpoint files.",
        "default": "0",
        "value": "0"
    },
    "checkpointLocation":
    {
        "cpDirectory":
        {
            "comment": "The directory where checkpoint files should be stored.",
            "default": ".\/checkpoints\/",
            "value": ".\/checkpoints\/"
        },
        "cpBaseName":
        {
            "comment": "The significant part of the checkpoint file name.",
            "default": "geneva.cp",
            "value": "geneva.cp"
        }
    },
    "cpSerMode":
    {
        "comment": "Determines whether check-pointing should be done in",
        "comment": "text- (0), XML- (1), or binary-mode (2)",
        "default": "2",
        "value": "2"
    },
    "qualityTermination":
    {
        "threshold":
        {
            "comment": "A threshold beyond which optimization is expected to stop",
            "comment": "Note that in order to activate this threshold, you also need to",
            "comment": "set \"hasQualityThreshold\" to 1.",
            "default": "0",
            "value": "0"
        },
        "thresholdActive":
        {
            "comment": "Activates (1) or de-activates (0) the quality threshold",
            "default": "false",
            "value": "false"
        }
    },
    "maxDuration":
    {
        "comment": "The maximum allowed time-frame for the optimization",
        "default": "00:00:00",
        "value": "00:00:00"
    },
    "emitTerminationReason":
    {
        "comment": "Triggers emission (1) or omission (0) of information about reasons for termination",
        "default": "true",
        "value": "true"
    },
    "swarmSize":
    {
        "nNeighborhoods":
        {
            "comment": "The desired number of neighborhoods in the population",
            "default": "5",
            "value": "5"
        },
        "nNeighborhoodMembers":
        {
            "comment": "The desired number of members in each neighborhood",
            "default": "10",
            "value": "10"
        }
    },
    "cPersonal":
    {
        "comment": "A constant to be multiplied with the personal direction vector",
        "default": "1.49",
        "value": "1.49"
    },
    "cNeighborhood":
    {
        "comment": "A constant to be multiplied with the neighborhood direction vector",
        "default": "1.49",
        "value": "1.49"
    },
    "cGlobal":
    {
        "comment": "A constant to be multiplied with the global direction vector",
        "default": "1",
        "value": "1"
    },
    "cVelocity":
    {
        "comment": "A constant to be multiplied with the old velocity vector",
        "default": "0.72",
        "value": "0.72"
    },
    "velocityRangePercentage":
    {
        "comment": "Sets the velocity-range percentage",
        "default": "0.15",
        "value": "0.15"
    },
    "updateRule":
    {
        "comment": "Specifies whether a linear (0) or classical (1)",
        "comment": "update rule should be used",
        "default": "1",
        "value": "1"
    },
    "randomFillUp":
    {
        "comment": "Specifies whether neighborhoods should be filled up",
        "comment": "randomly (true) or start with equal values (false)",
        "default": "true",
        "value": "true"
    },
    "repulsionThreshold":
    {
        "comment": "The number of stalls as of which the algorithm switches to repulsive mode",
        "comment": "Set this to 0 in order to disable this feature",
        "default": "0",
        "value": "0"
    }
}
