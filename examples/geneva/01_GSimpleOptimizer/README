This example is meant as the first starting point for exploring Geneva. It provides
easy command line access to the minimization of various mathematical functions, through
different optimization algorithms.

Several mathematical functions, ranging from a simple parabola to functions with an 
immense number of local optima are encoded in the GFunctionIndividual class. The example
searches for the global minimum of these functions. By default, the minimum of a 5-dimensional
parabola is sought for. You can change the type of target function, as well as many of 
its parameters (e.g. the search boundaries) in the configuration file 
"config/GFunctionIndividual.json".

Call the executable "GSimpleOptimizer" with the option --help to see the available 
command line options. Of particular interest for exploring Geneva are:
o The option "-a <algorithm-type>" . It lets you choose from different optimization algorithms.
  At the time of writing, Geneva implements evolutionary algorithms (-a "ea"), a simple gradient
  descent (-a "gd"), particle swarm optimization (-a "swarm"), simulated annealing (-a "sa") and
  parameter scans (-a "ps"). By default, the executable will use evolutionary algorithms
o The executable can run in serial (Option "-e 0"), multithreaded (Option "-e 1", the 
  default) or networked mode. 
o In order to try out networked execution on the local host, the server must be started
  with the options "-e 2 -c tcpc", the clients (try as many as you like) with the options
  "-e 2 -c tcpc --client". It is possible to add the server ip and port, when running in 
  a LAN- or WAN-context. Point them to the server -- it will by default use port 10000.

The executable will print the best parameters found when finished.
  
In order to facilitate the starting of a server and clients on the local host, there is 
a script called "startLocalJobs.sh" below $GENEVAHOME/scripts. Start it like this for 
4 local clients: "startLocalJobs.sh ./GSimpleOptimizer 4" from within the top directory
of GSimpleOptimizer . Note that the script does a "tail -f" on the server output, hence 
you need to stop it with a ctrl-c, when the example has run through.

As Geneva is a toolkit rather than a stand-alone application, we strongly 
recommend that you have a look at the source code of this example. Please find the code
for the GFunctionIndividual class in the directories $GENEVAHOME/include/geneva-individuals
and $GENEVAHOME/src/geneva-individuals