################################################################################
#
# Copyright (C) Gemfony scientific UG (haftungsbeschraenkt)
#
# See the AUTHORS file in the top-level directory for a list of authors.
#
# Contact: contact [at] gemfony (dot) eu
#
# This file is part of the Geneva library collection.
# Its purpose is to allow this example to be built independently from
# the main Geneva source tree.
#
# Geneva was developed with kind support from Karlsruhe Institute of
# Technology (KIT) and Steinbuch Centre for Computing (SCC). Further
# information about KIT and SCC can be found at http://www.kit.edu/english
# and http://scc.kit.edu .
#
# Geneva is free software: you can redistribute and/or modify it under
# the terms of version 3 of the GNU Affero General Public License
# as published by the Free Software Foundation.
#
# Geneva is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with the Geneva library. If not, see <http://www.gnu.org/licenses/>.
#
# For further information on Gemfony scientific and Geneva, visit
# http://www.gemfony.eu .
#
################################################################################

PROJECT (GStarter)

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

###############################################################################
# Adapt these for your environment. If you want to add custom libraries, you
# will have to make further changes below.

SET ( EXECUTABLENAME GStarter )

SET ( ${EXECUTABLENAME}_SRCS
	GStarter
	GStarterIndividual
)

SET ( CONFIGFILES
	config/GEvolutionaryAlgorithm.json
	config/GStarterIndividual.json
	config/Go2.json
)

################################################################################
#
# Set some default values for user-settings. Generally, these should be provided
# through a custom genevaConfig.gcfg, in conjunction with the prepareBuild.sh script.

IF( NOT DEFINED BOOST_ROOT )
	SET( BOOST_ROOT "/opt/boost155" )
ENDIF()
 
IF( NOT DEFINED BOOST_LIBRARYDIR )
	SET( BOOST_LIBRARYDIR "${BOOST_ROOT}/lib" )
ENDIF()

IF( NOT DEFINED BOOST_INCLUDEDIR )
	SET( BOOST_INCLUDEDIR "${BOOST_ROOT}/include/boost" )
ENDIF()

IF( NOT DEFINED GENEVA_BUILD_TYPE )
	SET( GENEVA_BUILD_TYPE "Release" )
ENDIF()

IF( NOT DEFINED GENEVA_BUILD_TESTS )
	SET( GENEVA_BUILD_TESTS FALSE )
ENDIF()

IF( NOT DEFINED GENEVA_CXX_STD )
	SET( GENEVA_CXX_STD "cxx98" )
ENDIF()

IF( NOT DEFINED GENEVA_STATIC )
	SET( GENEVA_STATIC 0 )
ENDIF()

IF( NOT DEFINED GENEVA_WITH_MPI )
	SET( GENEVA_WITH_MPI 0 )
ENDIF()

IF( NOT DEFINED CMAKE_VERBOSE_MAKEFILE )
	SET( CMAKE_VERBOSE_MAKEFILE 1 )
ENDIF()

IF( NOT DEFINED CMAKE_INSTALL_PREFIX )
	SET( CMAKE_INSTALL_PREFIX "/opt/geneva-${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}" )
ENDIF()

###############################################################################
# Set up the environment

# Make sure we first check our local modules directory
SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/CMakeModules")

# Find the Geneva library collection
FIND_PACKAGE(Geneva REQUIRED)

# A path to the main library's CMakeModules-directory should have been set.
# Cross-check and add to the CMAKE_MODULE_PATH. From then on we should be 
# able to perform the same setup steps as in the main Geneva CMakeLists.txt
IF(GENEVA_CMAKE_MODULES_DIR)
	LIST(APPEND CMAKE_MODULE_PATH "${GENEVA_CMAKE_MODULES_DIR}")
ELSE()
	MESSAGE(FATAL_ERROR "Path to the Geneva library's CMakeModules directory wasn't found.")
ENDIF()

###############################################################################
# Includes

INCLUDE(IdentifySystemParameters)

###############################################################################
# Identify old CMake version

# The "FOREACH IN LISTS" construct is only available starting with CMake 2.8.
# Detect that case to avoid build errors in CMake 2.6. 
IF( ${CMAKE_VERSION} VERSION_LESS 2.8.0 )
	SET( OLD_CMAKE TRUE )
	# We print a warning at end of the generation, to avoid it getting lost
ENDIF()

# Nice formatting
MESSAGE ("")

################################################################################
# Validates the build type chosen by the user (Release or Debug). Also sets
# the CMAKE_BUILD_TYPE accordingly

VALIDATE_BUILD_TYPE()

################################################################################
# Set a number of variables related to static or dynamic build-mode

IF ( GENEVA_STATIC ) 
	SET (BUILD_SHARED_LIBS OFF)
ELSE() # dynamic libraries
	SET (BUILD_SHARED_LIBS ON)
ENDIF()

################################################################################
# Identify the operating system

FIND_HOST_OS (
	GENEVA_OS_NAME 
	GENEVA_OS_VERSION
)

################################################################################
# Identify the compiler

FIND_HOST_COMPILER (
	GENEVA_COMPILER_NAME
	GENEVA_COMPILER_VERSION
	GENEVA_MAX_CXX_STANDARD
)

SET(MSG_COMPILER ${GENEVA_COMPILER_NAME})

################################################################################
# Determine the C++ standard to be used (depending on the desired standard
# and the maximum supported standard by the chosen compiler. This function
# will raise an error if the desired standard is higher than the maximum
# supported standard. It will also resolve the "auto" setting of the standard
# by setting it to the maximum supported standard.

GET_ACTUAL_CXX_STANDARD (
	${GENEVA_CXX_STD}
	${GENEVA_MAX_CXX_STANDARD}
	GENEVA_ACTUAL_CXX_STANDARD
)

SET (MSG_CXXSTANDARDMODE "Using ${GENEVA_COMPILER_NAME} compiler with ${GENEVA_ACTUAL_CXX_STANDARD} standard")

###############################################################################
# Identify unsupported setups as early as possible
FLAG_UNSUPPORTED_SETUPS(
	GENEVA_OS_NAME 
	GENEVA_OS_VERSION
	GENEVA_COMPILER_NAME
	GENEVA_COMPILER_VERSION
	GENEVA_ACTUAL_CXX_STANDARD
	GENEVA_STATIC
)

################################################################################
# Set up compiler flags and add them to the compiler definitions

GET_COMPILER_FLAGS (
	${GENEVA_OS_NAME}
	${GENEVA_OS_VERSION}
	${GENEVA_COMPILER_NAME}
	${GENEVA_COMPILER_VERSION}
	${GENEVA_ACTUAL_CXX_STANDARD}
	${GENEVA_BUILD_TYPE}
	GENEVA_COMPILER_FLAGS_OUT
)

ADD_DEFINITIONS("${GENEVA_COMPILER_FLAGS_OUT}")

################################################################################
# Boost-specific code

SET (Boost_USE_MULTITHREAD ON)
SET (Boost_ADDITIONAL_VERSIONS "1.49" "1.49.0" "1.50" "1.50.0" "1.51" "1.51.0" "1.52" "1.52.0" "1.53" "1.53.0" "1.54" "1.54.0" "1.55.0")

IF ( GENEVA_STATIC ) 
	SET (Boost_USE_STATIC_LIBS ON)
ELSE() # dynamic libraries
	SET (Boost_USE_STATIC_LIBS OFF)
ENDIF()  

# These are the libraries required for any Geneva build
SET (
	GENEVA_BOOST_LIBS
	date_time
	filesystem
	program_options
	regex
	serialization
	system
	thread	
)

# Only build tests if requested by the user
IF( GENEVA_BUILD_TESTS )
	ADD_DEFINITIONS ("-DGEM_TESTING")
	SET (
		GENEVA_BOOST_LIBS
		${GENEVA_BOOST_LIBS}
		test_exec_monitor
	)
ENDIF()

# Add MPI-Support if requested by the user
IF( GENEVA_WITH_MPI )
	SET (
		GENEVA_BOOST_LIBS
		${GENEVA_BOOST_LIBS}
		mpi
	)
ENDIF()

# Search for the required libraries
FIND_PACKAGE( 
	Boost 
	${GENEVA_MIN_BOOST_VERSION} REQUIRED 
	COMPONENTS ${GENEVA_BOOST_LIBS}
)

################################################################################
# Print some info messages for the user

MESSAGE ("\n========================================")
MESSAGE ("Building:")
IF( GENEVA_BUILD_TESTS )
	MESSAGE ("\twith test code")
ELSE()
	MESSAGE ("\twithout tests")
ENDIF()
MESSAGE ("\tin ${CMAKE_BUILD_TYPE} mode")
MESSAGE ("\tusing ${MSG_COMPILER} compiler settings")
MESSAGE ("\twith Boost include file location ${Boost_INCLUDE_DIRS}")
MESSAGE ("\twith Boost library location ${Boost_LIBRARY_DIRS}")
MESSAGE ("\twith install prefix ${CMAKE_INSTALL_PREFIX}")
IF( CMAKE_VERBOSE_MAKEFILE )
	MESSAGE ("\tand verbose CMake output")
ELSE()
	MESSAGE ("\tand sparse CMake output")
ENDIF()
MESSAGE ("========================================\n")

################################################################################
# Set up include- and link directories, libraries

INCLUDE_DIRECTORIES (
	${PROJECT_SOURCE_DIR}
	${GENEVA_INCLUDE_DIR}
	${Boost_INCLUDE_DIRS}
)

LINK_DIRECTORIES (
	${GENEVA_LIBRARY_DIR}
	${Boost_LIBRARY_DIRS}
)

ADD_EXECUTABLE(${EXECUTABLENAME}
	${${EXECUTABLENAME}_SRCS}
)

TARGET_LINK_LIBRARIES (${EXECUTABLENAME}
	${GENEVA_LIBRARIES}
	${Boost_LIBRARIES}
)

################################################################################
# Add tests, if required, and copy configuration files to 
# the build tree for easier testing.

# Copy the config files to the build tree for easier testing
IF( NOT OLD_CMAKE )
	FOREACH ( file IN LISTS CONFIGFILES )
		CONFIGURE_FILE ( ${file} ${file} . COPYONLY )
	ENDFOREACH ()
ENDIF()

#IF( GENEVA_BUILD_TESTS )
#	ADD_SUBDIRECTORY (Tests)
#ENDIF()

################################################################################
# Copy config files and executables to the install location 

INSTALL ( TARGETS ${EXECUTABLENAME} DESTINATION ${PROJECT_NAME}
	PERMISSIONS
	OWNER_READ OWNER_WRITE OWNER_EXECUTE
	GROUP_READ GROUP_EXECUTE
	WORLD_READ WORLD_EXECUTE
)

INSTALL ( FILES ${CONFIGFILES} DESTINATION ${PROJECT_NAME}
	PERMISSIONS
	OWNER_READ OWNER_WRITE
	GROUP_READ
	WORLD_READ
)

################################################################################
# done
