/**
 * @file GGlobalDefines.hpp
 */

/*
 * Copyright (C) Gemfony scientific UG (haftungsbeschraenkt)
 *
 * See the AUTHORS file in the top-level directory for a list of authors.
 *
 * Contact: contact [at] gemfony (dot) eu
 *
 * This file is part of the Geneva library collection.
 *
 * Geneva was developed with kind support from Karlsruhe Institute of
 * Technology (KIT) and Steinbuch Centre for Computing (SCC). Further
 * information about KIT and SCC can be found at http://www.kit.edu/english
 * and http://scc.kit.edu .
 *
 * Geneva is free software: you can redistribute and/or modify it under
 * the terms of version 3 of the GNU Affero General Public License
 * as published by the Free Software Foundation.
 *
 * Geneva is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with the Geneva library. If not, see <http://www.gnu.org/licenses/>.
 *
 * For further information on Gemfony scientific and Geneva, visit
 * http://www.gemfony.eu .
 */

/**
 * This file holds some global definitions used in all of Geneva. In particular, checks for
 * the Boost version being used are done here.
 */

#ifndef GGLOBALDEFINES_HPP_
#define GGLOBALDEFINES_HPP_

// For Microsoft-compatible compilers
#if defined(_MSC_VER)  &&  (_MSC_VER >= 1020)
#pragma once
#endif

#include <boost/version.hpp>

/** The minimum allowed version of the Boost library */
#define MIN_BOOST_VERSION 104100

#if BOOST_VERSION < MIN_BOOST_VERSION
#error "Error: Boost should at least have version 1.41 !"
#endif /* BOOST_VERSION */

/** The current version of the Geneva library */
#define GENEVA_VERSION @GENEVA_API_VERSION@

/** Funnily. on g++ std::pow(x,2) seems to be less efficient than direct multiplication */
#define GSQUARED(X) (X) * (X)

// Some Boost versions prevent proper termination of Geneva in conjunction with gcc. Tag these.
#if defined __GNUC__ && (BOOST_VERSION == 104400 || BOOST_VERSION == 104500 || BOOST_VERSION == 104600 || BOOST_VERSION == 104601)
#define GEM_INT_FORCE_TERMINATION
#endif

// Make sure we use boost filesystem v3 where available
#if BOOST_VERSION >= 104400
#define BOOST_FILESYSTEM_VERSION 3
#endif /* BOOST_VERSION >= 104400 */

// Check for C++11
#ifdef __GNUC__
#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 7)
#if __cplusplus == 201103L
#define GCPPELEVEN
#endif
#endif
#endif

// Define some macros that selectively switch on C++11 constructs when supported
#ifdef GCPPELEVEN
#define BASE /* Simply helps to mark functions considered to be at the base of the hierarchy */
#define OVERRIDE override
#define FINAL final
#else /* GCPPELEVEN */
#define BASE
#define OVERRIDE
#define FINAL
#endif /* GCPPELEVEN */

#endif /* GGLOBALDEFINES_HPP_ */
