/**
 * @file GCommonMathHelperFunctions.hpp
 */

/*
 * Copyright (C) Gemfony scientific UG (haftungsbeschraenkt)
 *
 * This file is part of the Geneva library collection.
 *
 * See the AUTHORS file in the top-level directory for a list of authors.
 *
 * Contact: contact [at] gemfony (dot) eu
 *
 * Geneva was developed with kind support from Karlsruhe Institute of
 * Technology (KIT) and Steinbuch Centre for Computing (SCC). Further
 * information about KIT and SCC can be found at http://www.kit.edu/english
 * and http://scc.kit.edu .
 *
 * Geneva is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Boost Software License for more details.
 *
 * For further information on Gemfony scientific and Geneva, visit
 * http://www.gemfony.eu .
 */

/*
 * The following license applies to the code in this file:
 *
 *******************************************************************************
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *******************************************************************************
 *
 * NOTE THAT THE BOOST-LICENSE DOES NOT APPLY TO ANY OTHER FILES OF THE
 * GENEVA LIBRARY, UNLESS THIS IS EXPLICITLY STATED IN THE CORRESPONDING FILE.
 */

// Global checks, defines and includes needed for all of Geneva
#include "common/GGlobalDefines.hpp"

// Standard headers go here
#include <cmath>
#include <cstdlib>

// Boost headers go here
#include <boost/math/special_functions.hpp>

#ifndef GCOMMONMATHHELPERFUNCTIONS_HPP_
#define GCOMMONMATHHELPERFUNCTIONS_HPP_

// Geneva headers go here
#include "common/GExceptions.hpp"
#include "common/GLogger.hpp"
#include "common/GErrorStreamer.hpp"

namespace Gem {
namespace Common {

/******************************************************************************/

/** @brief Calculates the acos value of a float value */
G_API_COMMON float gacos(const float &);
/** @brief Calculates the acos value of a double value */
G_API_COMMON double gacos(const double &);

/** @brief Calculates the asin value of a float value */
G_API_COMMON float gasin(const float &);
/** @brief Calculates the asin value of a double value */
G_API_COMMON double gasin(const double &);

/** @brief Calculates the tan value of a float value */
G_API_COMMON float gtan(const float &);
/** @brief Calculates the tan value of a double value */
G_API_COMMON double gtan(const double &);

/** @brief Calculates the tanh value of a float value */
G_API_COMMON float gtanh(const float &);
/** @brief Calculates the tanh value of a double value */
G_API_COMMON double gtanh(const double &);

/** @brief Calculates the atan value of a float value */
G_API_COMMON float gatan(const float &);
/** @brief Calculates the atan value of a double value */
G_API_COMMON double gatan(const double &);

/** @brief Calculates the sinh value of a float value */
G_API_COMMON float gsinh(const float &);
/** @brief Calculates the sinh value of a double value */
G_API_COMMON double gsinh(const double &);

/** @brief Calculates the cosh value of a float value */
G_API_COMMON float gcosh(const float &);
/** @brief Calculates the cosh value of a double value */
G_API_COMMON double gcosh(const double &);

/** @brief Calculates the ceil value of a float value */
G_API_COMMON float gceil(const float &);
/** @brief Calculates the ceil value of a double value */
G_API_COMMON double gceil(const double &);

/** @brief Calculates the maximum value of two float values */
G_API_COMMON float gmax(const float &, const float &);
/** @brief Calculates the maximum value of two double values */
G_API_COMMON double gmax(const double &, const double &);

/** @brief Calculates the minimum value of two float values */
G_API_COMMON float gmin(const float &, const float &);
/** @brief Calculates the minimum value of two double values */
G_API_COMMON double gmin(const double &, const double &);

/** @brief Calculates the floor value of a float value */
G_API_COMMON float gfloor(const float &);
/** @brief Calculates the floor value of a double value */
G_API_COMMON double gfloor(const double &);
/** @brief Calculates the floor value of a double value */
G_API_COMMON long double gfloor(const long double &);

/** @brief Calculates the fabs value of a float value */
G_API_COMMON float gfabs(const float &);
/** @brief Calculates the fabs value of a double value */
G_API_COMMON double gfabs(const double &);
/** @brief Calculates the fabs value of a long double value */
G_API_COMMON long double gfabs(const long double &);

/** @brief Calculates the abs value of an int value */
G_API_COMMON int giabs(const int &);
/** @brief Calculates the abs value of a long int value */
G_API_COMMON long giabs(const long &);

/** @brief Calculates the sqrt value of a float value */
G_API_COMMON float gsqrt(const float &);
/** @brief Calculates the sqrt value of a double value */
G_API_COMMON double gsqrt(const double &);

/** @brief Calculates the sin value of a float value */
G_API_COMMON float gsin(const float &);
/** @brief Calculates the sin value of a double value */
G_API_COMMON double gsin(const double &);

/** @brief Calculates the cos value of a float value */
G_API_COMMON float gcos(const float &);
/** @brief Calculates the cos value of a double value */
G_API_COMMON double gcos(const double &);

/** @brief Calculates the log value of a float value */
G_API_COMMON float glog(const float &);
/** @brief Calculates the log value of a double value */
G_API_COMMON double glog(const double &);

/** @brief Calculates the log10 value of a float value */
G_API_COMMON float glog10(const float &);
/** @brief Calculates the log10 value of a double value */
G_API_COMMON double glog10(const double &);

/** @brief Calculates the pow value of a float value */
G_API_COMMON float gpow(const float &, const float &);
/** @brief Calculates the pow value of a double value */
G_API_COMMON double gpow(const double &, const double &);

/** @brief Calculates the hypot value of a float value */
G_API_COMMON float ghypot(const float &, const float &);
/** @brief Calculates the hypot value of a double value */
G_API_COMMON double ghypot(const double &, const double &);

/** @brief Performs alpha blending for floats */
G_API_COMMON float gmix(const float &, const float &, const float &);
/** @brief Performs alpha blending for doubles */
G_API_COMMON double gmix(const double &, const double &, const double &);

/** @brief Calculates the exp value of a float value */
G_API_COMMON float gexp(const float &);
/** @brief Calculates the exp value of a double value */
G_API_COMMON double gexp(const double &);

/** @brief Calculates the sign value of a float value */
G_API_COMMON float gsign(const float &);
/** @brief Calculates the sign value of a double value */
G_API_COMMON double gsign(const double &);

/** @brief A sigmoid function with user-defined minimum / maximum values (float version) */
G_API_COMMON float gsigmoid(const float &, const float &, const float &);
/** @brief A sigmoid function with user-defined minimum / maximum values (double version) */
G_API_COMMON double gsigmoid(const double &, const double &, const double &);

} /* namespace Common */
} /* namespace Gem */

#endif /* GCOMMONMATHHELPERFUNCTIONS_HPP_ */
