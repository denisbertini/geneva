/**
 * @file GMathHelperFunctions.hpp
 */

/*
 * Copyright (C) Gemfony scientific UG (haftungsbeschraenkt)
 *
 * This file is part of the Geneva library collection.
 *
 * See the AUTHORS file in the top-level directory for a list of authors.
 *
 * Contact: contact [at] gemfony (dot) eu
 *
 * Geneva was developed with kind support from Karlsruhe Institute of
 * Technology (KIT) and Steinbuch Centre for Computing (SCC). Further
 * information about KIT and SCC can be found at http://www.kit.edu/english
 * and http://scc.kit.edu .
 *
 * Geneva is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Boost Software License for more details.
 *
 * For further information on Gemfony scientific and Geneva, visit
 * http://www.gemfony.eu .
 */

/*
 * The following license applies to the code in this file:
 *
 *******************************************************************************
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *******************************************************************************
 *
 * NOTE THAT THE BOOST-LICENSE DOES NOT APPLY TO ANY OTHER FILES OF THE
 * GENEVA LIBRARY, UNLESS THIS IS EXPLICITLY STATED IN THE CORRESPONDING FILE.
 */


// Standard headers go here
#include <cmath>
#include <cstdlib>

// Boost headers go here
#include <boost/math/special_functions.hpp>

#ifndef GMATHHELPERFUNCTIONS_HPP_
#define GMATHHELPERFUNCTIONS_HPP_

// For Microsoft-compatible compilers
#if defined(_MSC_VER)  &&  (_MSC_VER >= 1020)
#pragma once
#endif

// Geneva headers go here
#include "common/GExceptions.hpp"

namespace Gem {
namespace Common {

/******************************************************************************/

/** @brief Calculates the acos value of a float value */
float gacos(const float&);
/** @brief Calculates the acos value of a double value */
double gacos(const double&);

/** @brief Calculates the asin value of a float value */
float gasin(const float&);
/** @brief Calculates the asin value of a double value */
double gasin(const double&);

/** @brief Calculates the tan value of a float value */
float gtan(const float&);
/** @brief Calculates the tan value of a double value */
double gtan(const double&);

/** @brief Calculates the tanh value of a float value */
float gtanh(const float&);
/** @brief Calculates the tanh value of a double value */
double gtanh(const double&);

/** @brief Calculates the atan value of a float value */
float gatan(const float&);
/** @brief Calculates the atan value of a double value */
double gatan(const double&);

/** @brief Calculates the sinh value of a float value */
float gsinh(const float&);
/** @brief Calculates the sinh value of a double value */
double gsinh(const double&);

/** @brief Calculates the cosh value of a float value */
float gcosh(const float&);
/** @brief Calculates the cosh value of a double value */
double gcosh(const double&);

/** @brief Calculates the ceil value of a float value */
float gceil(const float&);
/** @brief Calculates the ceil value of a double value */
double gceil(const double&);

/** @brief Calculates the maximum value of two float values */
float gmax(const float&, const float&);
/** @brief Calculates the maximum value of two double values */
double gmax(const double&, const double&);

/** @brief Calculates the minimum value of two float values */
float gmin(const float&, const float&);
/** @brief Calculates the minimum value of two double values */
double gmin(const double&, const double&);

/** @brief Calculates the floor value of a float value */
float gfloor(const float&);
/** @brief Calculates the floor value of a double value */
double gfloor(const double&);

/** @brief Calculates the fabs value of a float value */
float gfabs(const float&);
/** @brief Calculates the fabs value of a double value */
double gfabs(const double&);

/** @brief Calculates the abs value of an int value */
int giabs(const int&);
/** @brief Calculates the abs value of a long int value */
long giabs(const long&);

/** @brief Calculates the sqrt value of a float value */
float gsqrt(const float&);
/** @brief Calculates the sqrt value of a double value */
double gsqrt(const double&);

/** @brief Calculates the sin value of a float value */
float gsin(const float&);
/** @brief Calculates the sin value of a double value */
double gsin(const double&);

/** @brief Calculates the cos value of a float value */
float gcos(const float&);
/** @brief Calculates the cos value of a double value */
double gcos(const double&);

/** @brief Calculates the log value of a float value */
float glog(const float&);
/** @brief Calculates the log value of a double value */
double glog(const double&);

/** @brief Calculates the log10 value of a float value */
float glog10(const float&);
/** @brief Calculates the log10 value of a double value */
double glog10(const double&);

/** @brief Calculates the pow value of a float value */
float gpow(const float&, const float&);
/** @brief Calculates the pow value of a double value */
double gpow(const double&, const double&);

/** @brief Calculates the hypot value of a float value */
float ghypot(const float&, const float&);
/** @brief Calculates the hypot value of a double value */
double ghypot(const double&, const double&);

/** @brief Performs alpha blending for floats */
float gmix(const float&, const float&, const float&);
/** @brief Performs alpha blending for doubles */
double gmix(const double&, const double&, const double&);

/** @brief Calculates the exp value of a float value */
float gexp(const float&);
/** @brief Calculates the exp value of a double value */
double gexp(const double&);

/** @brief Calculates the sign value of a float value */
float gsign(const float&);
/** @brief Calculates the sign value of a double value */
double gsign(const double&);

/** @brief A sigmoid function with user-defined minimum / maximum values (float version) */
float gsigmoid(const float&, const float&, const float&);
/** @brief A sigmoid function with user-defined minimum / maximum values (double version) */
double gsigmoid(const double&, const double&, const double&);

/******************************************************************************/
/**
 * Regulates access to these mathematical functions from boost::phoenix::function.
 * Targeted at unary functions.
 */
struct lazy_unary_functor_reference_arg
{
  template <typename F, typename fp_type>
  struct result { typedef fp_type type; };

  template <typename F, typename fp_type>
  fp_type operator()(
     F f
     , const fp_type& var1
  ) const {
     return f(var1);
  }
};

/******************************************************************************/
/**
 * Regulates access to these mathematical functions from boost::phoenix::function.
 * Targeted at binary functions.
 */
struct lazy_binary_functor_reference_arg
{
  template <typename F, typename fp_type1, typename fp_type2>
  struct result { typedef fp_type1 type; };

  template <typename F, typename fp_type1, typename fp_type2>
  fp_type1 operator()(
     F f
     , const fp_type1& var1
     , const fp_type2& var2
  ) const {
     return f(var1, var2);
  }
};

/******************************************************************************/

} /* namespace Common */
} /* namespace Gem */

#endif /* GMATHHELPERFUNCTIONS_HPP_ */
